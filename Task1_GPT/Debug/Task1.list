
Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005b4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000748  08000748  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000748  08000748  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08000748  08000748  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000748  08000748  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000748  08000748  00010748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800074c  0800074c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08000750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000050  080007a0  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080007a0  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008ab  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000326  00000000  00000000  0002092b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00020c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00020d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd62  00000000  00000000  00020e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000934  00000000  00000000  0002eb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050048  00000000  00000000  0002f496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007f4de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000244  00000000  00000000  0007f534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000050 	.word	0x20000050
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000730 	.word	0x08000730

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000054 	.word	0x20000054
 80001d0:	08000730 	.word	0x08000730

080001d4 <GPIO_EnableClock>:

unsigned int *lookuptable[2][10]={{GPIOA_MODER,GPIOA_OTYPER,GPIOA_OSPEEDR ,GPIOA_PUPDR,GPIOA_IDR,GPIOA_ODR ,GPIOA_BSRR ,GPIOA_LCKR,GPIOA_AFRL,GPIOA_AFRH},
		                          {GPIOB_MODER,GPIOB_OTYPER,GPIOB_OSPEEDR ,GPIOB_PUPDR,GPIOB_IDR,GPIOB_ODR ,GPIOB_BSRR ,GPIOB_LCKR,GPIOB_BFRL, GPIOB_BFRH}};


void GPIO_EnableClock(unsigned char PORT_ID) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	*RCC_AHB1ENR |= ((unsigned int)0x01 << (unsigned int)PORT_ID);
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <GPIO_EnableClock+0x28>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <GPIO_EnableClock+0x28>)
 80001ec:	4313      	orrs	r3, r2
 80001ee:	600b      	str	r3, [r1, #0]


}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	40023830 	.word	0x40023830

08000200 <GPIO_Init>:

void GPIO_Init(unsigned char PORT_ID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000200:	b490      	push	{r4, r7}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4604      	mov	r4, r0
 8000208:	4608      	mov	r0, r1
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	4623      	mov	r3, r4
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4603      	mov	r3, r0
 8000214:	71bb      	strb	r3, [r7, #6]
 8000216:	460b      	mov	r3, r1
 8000218:	717b      	strb	r3, [r7, #5]
 800021a:	4613      	mov	r3, r2
 800021c:	713b      	strb	r3, [r7, #4]

      *lookuptable[PORT_ID][0] &= ~((unsigned int)0x03 << (unsigned int)2 * PinNum);
 800021e:	79fa      	ldrb	r2, [r7, #7]
 8000220:	4953      	ldr	r1, [pc, #332]	; (8000370 <GPIO_Init+0x170>)
 8000222:	4613      	mov	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	4413      	add	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	440b      	add	r3, r1
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	005b      	lsls	r3, r3, #1
 8000234:	2203      	movs	r2, #3
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	43d9      	mvns	r1, r3
 800023c:	79fa      	ldrb	r2, [r7, #7]
 800023e:	4c4c      	ldr	r4, [pc, #304]	; (8000370 <GPIO_Init+0x170>)
 8000240:	4613      	mov	r3, r2
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	4413      	add	r3, r2
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	4423      	add	r3, r4
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	ea00 0201 	and.w	r2, r0, r1
 8000250:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][0] |= (unsigned int)PinMode << (unsigned int)2 * PinNum;
 8000252:	79fa      	ldrb	r2, [r7, #7]
 8000254:	4946      	ldr	r1, [pc, #280]	; (8000370 <GPIO_Init+0x170>)
 8000256:	4613      	mov	r3, r2
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	4413      	add	r3, r2
 800025c:	00db      	lsls	r3, r3, #3
 800025e:	440b      	add	r3, r1
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	797a      	ldrb	r2, [r7, #5]
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	fa02 f103 	lsl.w	r1, r2, r3
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	4c3f      	ldr	r4, [pc, #252]	; (8000370 <GPIO_Init+0x170>)
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	4423      	add	r3, r4
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	ea40 0201 	orr.w	r2, r0, r1
 8000282:	601a      	str	r2, [r3, #0]

      *lookuptable[PORT_ID][1] &= ~((unsigned int)1 << (unsigned int)PinNum);
 8000284:	79fa      	ldrb	r2, [r7, #7]
 8000286:	493a      	ldr	r1, [pc, #232]	; (8000370 <GPIO_Init+0x170>)
 8000288:	4613      	mov	r3, r2
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	4413      	add	r3, r2
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	440b      	add	r3, r1
 8000292:	3304      	adds	r3, #4
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	79bb      	ldrb	r3, [r7, #6]
 800029a:	2201      	movs	r2, #1
 800029c:	fa02 f303 	lsl.w	r3, r2, r3
 80002a0:	43d9      	mvns	r1, r3
 80002a2:	79fa      	ldrb	r2, [r7, #7]
 80002a4:	4c32      	ldr	r4, [pc, #200]	; (8000370 <GPIO_Init+0x170>)
 80002a6:	4613      	mov	r3, r2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4413      	add	r3, r2
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	4423      	add	r3, r4
 80002b0:	3304      	adds	r3, #4
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	ea00 0201 	and.w	r2, r0, r1
 80002b8:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][1] |= ((unsigned int)(DefaultState & _OUTTYPE_MASK) >> (unsigned int)_OUTTYPE_SHIFT) << (unsigned int)PinNum;
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	492c      	ldr	r1, [pc, #176]	; (8000370 <GPIO_Init+0x170>)
 80002be:	4613      	mov	r3, r2
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	4413      	add	r3, r2
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	440b      	add	r3, r1
 80002c8:	3304      	adds	r3, #4
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	6818      	ldr	r0, [r3, #0]
 80002ce:	793b      	ldrb	r3, [r7, #4]
 80002d0:	f003 0201 	and.w	r2, r3, #1
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	fa02 f103 	lsl.w	r1, r2, r3
 80002da:	79fa      	ldrb	r2, [r7, #7]
 80002dc:	4c24      	ldr	r4, [pc, #144]	; (8000370 <GPIO_Init+0x170>)
 80002de:	4613      	mov	r3, r2
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	4413      	add	r3, r2
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4423      	add	r3, r4
 80002e8:	3304      	adds	r3, #4
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	ea40 0201 	orr.w	r2, r0, r1
 80002f0:	601a      	str	r2, [r3, #0]

      *lookuptable[PORT_ID][3] &= ~((unsigned int)0x03 << (unsigned int)2 * PinNum);
 80002f2:	79fa      	ldrb	r2, [r7, #7]
 80002f4:	491e      	ldr	r1, [pc, #120]	; (8000370 <GPIO_Init+0x170>)
 80002f6:	4613      	mov	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4413      	add	r3, r2
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	440b      	add	r3, r1
 8000300:	330c      	adds	r3, #12
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6818      	ldr	r0, [r3, #0]
 8000306:	79bb      	ldrb	r3, [r7, #6]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	2203      	movs	r2, #3
 800030c:	fa02 f303 	lsl.w	r3, r2, r3
 8000310:	43d9      	mvns	r1, r3
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	4c16      	ldr	r4, [pc, #88]	; (8000370 <GPIO_Init+0x170>)
 8000316:	4613      	mov	r3, r2
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4413      	add	r3, r2
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	4423      	add	r3, r4
 8000320:	330c      	adds	r3, #12
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	ea00 0201 	and.w	r2, r0, r1
 8000328:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][3] |= ((unsigned int)(DefaultState & _PUPD_MASK) >> (unsigned int)_PUPD_SHIFT) << (unsigned int)(2 * PinNum);
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	4910      	ldr	r1, [pc, #64]	; (8000370 <GPIO_Init+0x170>)
 800032e:	4613      	mov	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4413      	add	r3, r2
 8000334:	00db      	lsls	r3, r3, #3
 8000336:	440b      	add	r3, r1
 8000338:	330c      	adds	r3, #12
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	6818      	ldr	r0, [r3, #0]
 800033e:	793b      	ldrb	r3, [r7, #4]
 8000340:	085b      	lsrs	r3, r3, #1
 8000342:	f003 0303 	and.w	r3, r3, #3
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0052      	lsls	r2, r2, #1
 800034a:	fa03 f102 	lsl.w	r1, r3, r2
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	4c07      	ldr	r4, [pc, #28]	; (8000370 <GPIO_Init+0x170>)
 8000352:	4613      	mov	r3, r2
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	4413      	add	r3, r2
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	4423      	add	r3, r4
 800035c:	330c      	adds	r3, #12
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	ea40 0201 	orr.w	r2, r0, r1
 8000364:	601a      	str	r2, [r3, #0]
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bc90      	pop	{r4, r7}
 800036e:	4770      	bx	lr
 8000370:	20000000 	.word	0x20000000

08000374 <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PORT_ID, unsigned char PinNum,
                            unsigned char Data) {
 8000374:	b490      	push	{r4, r7}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	460b      	mov	r3, r1
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	4613      	mov	r3, r2
 8000384:	717b      	strb	r3, [r7, #5]
  unsigned char result;
      if ((((unsigned int)*lookuptable[PORT_ID][0] & ((unsigned int)0x03 << (unsigned int)2 * PinNum)) >> ((unsigned int)2 * PinNum)) == (unsigned int)1) {
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	492b      	ldr	r1, [pc, #172]	; (8000438 <GPIO_WritePin+0xc4>)
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	440b      	add	r3, r1
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	2103      	movs	r1, #3
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	401a      	ands	r2, r3
 80003a4:	79bb      	ldrb	r3, [r7, #6]
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	fa22 f303 	lsr.w	r3, r2, r3
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d13b      	bne.n	8000428 <GPIO_WritePin+0xb4>
        if (Data) {
 80003b0:	797b      	ldrb	r3, [r7, #5]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d01a      	beq.n	80003ec <GPIO_WritePin+0x78>
        	*lookuptable[PORT_ID][5] |= ((unsigned int)1 << (unsigned int)PinNum);
 80003b6:	79fa      	ldrb	r2, [r7, #7]
 80003b8:	491f      	ldr	r1, [pc, #124]	; (8000438 <GPIO_WritePin+0xc4>)
 80003ba:	4613      	mov	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	440b      	add	r3, r1
 80003c4:	3314      	adds	r3, #20
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	6818      	ldr	r0, [r3, #0]
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	2201      	movs	r2, #1
 80003ce:	fa02 f103 	lsl.w	r1, r2, r3
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	4c18      	ldr	r4, [pc, #96]	; (8000438 <GPIO_WritePin+0xc4>)
 80003d6:	4613      	mov	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4413      	add	r3, r2
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	4423      	add	r3, r4
 80003e0:	3314      	adds	r3, #20
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	ea40 0201 	orr.w	r2, r0, r1
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e01a      	b.n	8000422 <GPIO_WritePin+0xae>
        } else {
        	*lookuptable[PORT_ID][5] &= ~((unsigned int)1 << (unsigned int)PinNum);
 80003ec:	79fa      	ldrb	r2, [r7, #7]
 80003ee:	4912      	ldr	r1, [pc, #72]	; (8000438 <GPIO_WritePin+0xc4>)
 80003f0:	4613      	mov	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4413      	add	r3, r2
 80003f6:	00db      	lsls	r3, r3, #3
 80003f8:	440b      	add	r3, r1
 80003fa:	3314      	adds	r3, #20
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	2201      	movs	r2, #1
 8000404:	fa02 f303 	lsl.w	r3, r2, r3
 8000408:	43d9      	mvns	r1, r3
 800040a:	79fa      	ldrb	r2, [r7, #7]
 800040c:	4c0a      	ldr	r4, [pc, #40]	; (8000438 <GPIO_WritePin+0xc4>)
 800040e:	4613      	mov	r3, r2
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	4423      	add	r3, r4
 8000418:	3314      	adds	r3, #20
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	ea00 0201 	and.w	r2, r0, r1
 8000420:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	e001      	b.n	800042c <GPIO_WritePin+0xb8>
      } else {
        result = NOK;
 8000428:	2301      	movs	r3, #1
 800042a:	73fb      	strb	r3, [r7, #15]
      }

  return result;
 800042c:	7bfb      	ldrb	r3, [r7, #15]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bc90      	pop	{r4, r7}
 8000436:	4770      	bx	lr
 8000438:	20000000 	.word	0x20000000

0800043c <NVIC>:
#include "NIVC.h"

void NVIC(unsigned int position){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]

	if ((unsigned int)position<(unsigned int)32){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b1f      	cmp	r3, #31
 8000448:	d809      	bhi.n	800045e <NVIC+0x22>
		NVIC_ISER0 |= ((unsigned long int)1 << (unsigned long int)position);
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <NVIC+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	2101      	movs	r1, #1
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	fa01 f303 	lsl.w	r3, r1, r3
 8000456:	4912      	ldr	r1, [pc, #72]	; (80004a0 <NVIC+0x64>)
 8000458:	4313      	orrs	r3, r2
 800045a:	600b      	str	r3, [r1, #0]
	}

	else{
		NVIC_ISER2 |= ((unsigned int)1 << ((unsigned int)position - (unsigned int)64));
	}
}
 800045c:	e01a      	b.n	8000494 <NVIC+0x58>
	else if(position>=32 && position<63){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b1f      	cmp	r3, #31
 8000462:	d90d      	bls.n	8000480 <NVIC+0x44>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b3e      	cmp	r3, #62	; 0x3e
 8000468:	d80a      	bhi.n	8000480 <NVIC+0x44>
		NVIC_ISER1 |= ((unsigned int)1 << ((unsigned int)position - (unsigned int)32));
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <NVIC+0x68>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3b20      	subs	r3, #32
 8000472:	2101      	movs	r1, #1
 8000474:	fa01 f303 	lsl.w	r3, r1, r3
 8000478:	490a      	ldr	r1, [pc, #40]	; (80004a4 <NVIC+0x68>)
 800047a:	4313      	orrs	r3, r2
 800047c:	600b      	str	r3, [r1, #0]
}
 800047e:	e009      	b.n	8000494 <NVIC+0x58>
		NVIC_ISER2 |= ((unsigned int)1 << ((unsigned int)position - (unsigned int)64));
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <NVIC+0x6c>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b40      	subs	r3, #64	; 0x40
 8000488:	2101      	movs	r1, #1
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	4906      	ldr	r1, [pc, #24]	; (80004a8 <NVIC+0x6c>)
 8000490:	4313      	orrs	r3, r2
 8000492:	600b      	str	r3, [r1, #0]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	e000e100 	.word	0xe000e100
 80004a4:	e000e104 	.word	0xe000e104
 80004a8:	e000e108 	.word	0xe000e108

080004ac <TIM_Init>:
#include<TIMER.h>
#include<GPIO.h>



void TIM_Init(unsigned char id,unsigned char counterMode,unsigned long prescaler,unsigned long ARR_value){
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60ba      	str	r2, [r7, #8]
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	4603      	mov	r3, r0
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	460b      	mov	r3, r1
 80004bc:	73bb      	strb	r3, [r7, #14]

	*RCC_APB1ENR |= ((unsigned int)0x01 << (unsigned int)(id -2));  /*Enable Timer clock*/
 80004be:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <TIM_Init+0x10c>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4619      	mov	r1, r3
 80004c8:	2301      	movs	r3, #1
 80004ca:	408b      	lsls	r3, r1
 80004cc:	493a      	ldr	r1, [pc, #232]	; (80005b8 <TIM_Init+0x10c>)
 80004ce:	4313      	orrs	r3, r2
 80004d0:	600b      	str	r3, [r1, #0]

	TIMx_PSC(id) = prescaler - 1;	    /*prescale value */
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 80004d8:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 80004dc:	029b      	lsls	r3, r3, #10
 80004de:	3328      	adds	r3, #40	; 0x28
 80004e0:	461a      	mov	r2, r3
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	6013      	str	r3, [r2, #0]

	TIMx_ARR(id) = ARR_value;	       /*ARR value*/
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 80004ee:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 80004f2:	029b      	lsls	r3, r3, #10
 80004f4:	332c      	adds	r3, #44	; 0x2c
 80004f6:	461a      	mov	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6013      	str	r3, [r2, #0]

	TIMx_CR1(id) |= ((unsigned int)0x01 << (unsigned int)0);         /*Enable counter*/
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 8000502:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8000506:	029b      	lsls	r3, r3, #10
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 8000510:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8000514:	029b      	lsls	r3, r3, #10
 8000516:	4619      	mov	r1, r3
 8000518:	f042 0301 	orr.w	r3, r2, #1
 800051c:	600b      	str	r3, [r1, #0]

	TIMx_CR1(id) &= ~((unsigned int)0x02 << (unsigned int)5);		/*Counts up or down*/
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 8000524:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8000528:	029b      	lsls	r3, r3, #10
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 8000532:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8000536:	029b      	lsls	r3, r3, #10
 8000538:	4619      	mov	r1, r3
 800053a:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800053e:	600b      	str	r3, [r1, #0]

	TIMx_CR1(id) |= ((unsigned int)counterMode << (unsigned int)4); /*Direction of counting*/
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 8000546:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 800054a:	029b      	lsls	r3, r3, #10
 800054c:	6819      	ldr	r1, [r3, #0]
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	011a      	lsls	r2, r3, #4
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 8000558:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 800055c:	029b      	lsls	r3, r3, #10
 800055e:	4618      	mov	r0, r3
 8000560:	ea41 0302 	orr.w	r3, r1, r2
 8000564:	6003      	str	r3, [r0, #0]

	while ( !((unsigned int)TIMx_SR(id)) & ((unsigned int)0x01 << (unsigned int)0)) ; /*waiting interrupt Flag to be set*/
 8000566:	bf00      	nop
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 800056e:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	3310      	adds	r3, #16
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <TIM_Init+0xd4>
 800057c:	2301      	movs	r3, #1
 800057e:	e000      	b.n	8000582 <TIM_Init+0xd6>
 8000580:	2300      	movs	r3, #0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f0      	bne.n	8000568 <TIM_Init+0xbc>

	TIMx_SR(id) &= ~((unsigned int)0x01 <<(unsigned int) 0);      /*Reset flag*/
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 800058c:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8000590:	029b      	lsls	r3, r3, #10
 8000592:	3310      	adds	r3, #16
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 800059c:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 80005a0:	029b      	lsls	r3, r3, #10
 80005a2:	3310      	adds	r3, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	f022 0301 	bic.w	r3, r2, #1
 80005aa:	600b      	str	r3, [r1, #0]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023840 	.word	0x40023840

080005bc <TIM_Start>:




void TIM_Start(unsigned char id){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	TIMx_DIER(id) |= ((unsigned int)0x01 << (unsigned int)0);		/*Update interrupt enable*/
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 80005cc:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 80005d0:	029b      	lsls	r3, r3, #10
 80005d2:	330c      	adds	r3, #12
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 80005dc:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 80005e0:	029b      	lsls	r3, r3, #10
 80005e2:	330c      	adds	r3, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	f042 0301 	orr.w	r3, r2, #1
 80005ea:	600b      	str	r3, [r1, #0]

}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <main>:
#include "TIMER.h"
#include "NIVC.h"
#include "main.h"
unsigned char Led_toggle = 0;

int main(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

NVIC((unsigned int)28);  /*TIM2 */
 80005fc:	201c      	movs	r0, #28
 80005fe:	f7ff ff1d 	bl	800043c <NVIC>

GPIO_EnableClock((unsigned char)0);	/* Port A */
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff fde6 	bl	80001d4 <GPIO_EnableClock>
GPIO_Init((unsigned char)0,(unsigned char)0,OUTPUT,PUSH_PULL); /* Pin 0 config */
 8000608:	2300      	movs	r3, #0
 800060a:	2201      	movs	r2, #1
 800060c:	2100      	movs	r1, #0
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff fdf6 	bl	8000200 <GPIO_Init>

TIM_Init((unsigned char)2,UP_COUNT,1000,16000); /*INIT TIM2 */
 8000614:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061c:	2100      	movs	r1, #0
 800061e:	2002      	movs	r0, #2
 8000620:	f7ff ff44 	bl	80004ac <TIM_Init>
TIM_Start((unsigned char)2);	/*Interrupt Enable */
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff ffc9 	bl	80005bc <TIM_Start>

  while (1) {
 800062a:	e7fe      	b.n	800062a <main+0x32>

0800062c <TIM2_IRQHandler>:

	  }

}

void TIM2_IRQHandler(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

	if (TIMx_CR1((unsigned char)2) & ((unsigned char)0x01 << (unsigned char)0)){
 8000630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00c      	beq.n	8000658 <TIM2_IRQHandler+0x2c>

		Led_toggle = ~Led_toggle;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <TIM2_IRQHandler+0x3c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	43db      	mvns	r3, r3
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <TIM2_IRQHandler+0x3c>)
 8000648:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin((unsigned char)0,(unsigned char)0,Led_toggle);
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <TIM2_IRQHandler+0x3c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff fe8e 	bl	8000374 <GPIO_WritePin>

	}

	TIMx_SR((unsigned char)2) &= ~((unsigned char)0x01 << (unsigned char)0);
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <TIM2_IRQHandler+0x40>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <TIM2_IRQHandler+0x40>)
 800065e:	f023 0301 	bic.w	r3, r3, #1
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000006c 	.word	0x2000006c
 800066c:	40000010 	.word	0x40000010

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x20>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <SystemInit+0x20>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800069a:	490e      	ldr	r1, [pc, #56]	; (80006d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006b0:	4c0b      	ldr	r4, [pc, #44]	; (80006e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006be:	f7ff ffd7 	bl	8000670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c2:	f000 f811 	bl	80006e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c6:	f7ff ff97 	bl	80005f8 <main>
  bx  lr    
 80006ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80006d8:	08000750 	.word	0x08000750
  ldr r2, =_sbss
 80006dc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80006e0:	20000070 	.word	0x20000070

080006e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4d0d      	ldr	r5, [pc, #52]	; (8000720 <__libc_init_array+0x38>)
 80006ec:	4c0d      	ldr	r4, [pc, #52]	; (8000724 <__libc_init_array+0x3c>)
 80006ee:	1b64      	subs	r4, r4, r5
 80006f0:	10a4      	asrs	r4, r4, #2
 80006f2:	2600      	movs	r6, #0
 80006f4:	42a6      	cmp	r6, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	4d0b      	ldr	r5, [pc, #44]	; (8000728 <__libc_init_array+0x40>)
 80006fa:	4c0c      	ldr	r4, [pc, #48]	; (800072c <__libc_init_array+0x44>)
 80006fc:	f000 f818 	bl	8000730 <_init>
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	2600      	movs	r6, #0
 8000706:	42a6      	cmp	r6, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000710:	4798      	blx	r3
 8000712:	3601      	adds	r6, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f855 3b04 	ldr.w	r3, [r5], #4
 800071a:	4798      	blx	r3
 800071c:	3601      	adds	r6, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	08000748 	.word	0x08000748
 8000724:	08000748 	.word	0x08000748
 8000728:	08000748 	.word	0x08000748
 800072c:	0800074c 	.word	0x0800074c

08000730 <_init>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr

0800073c <_fini>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr
