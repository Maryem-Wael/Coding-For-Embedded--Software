
43_polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000958  08000958  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000958  08000958  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08000958  08000958  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000958  08000958  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800095c  0800095c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08000960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000058  080009b8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000080  080009b8  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001767  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000755  00000000  00000000  000217ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00021f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  000220f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a38d  00000000  00000000  00022230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f08  00000000  00000000  0002c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000363c0  00000000  00000000  0002e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00064885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000460  00000000  00000000  000648d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000940 	.word	0x08000940

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	08000940 	.word	0x08000940

080001d4 <GPIO_EnableClock>:

unsigned int *lookuptable[2][10]={{GPIOA_MODER,GPIOA_OTYPER,GPIOA_OSPEEDR ,GPIOA_PUPDR,GPIOA_IDR,GPIOA_ODR ,GPIOA_BSRR ,GPIOA_LCKR,GPIOA_AFRL,GPIOA_AFRH},
		                          {GPIOB_MODER,GPIOB_OTYPER,GPIOB_OSPEEDR ,GPIOB_PUPDR,GPIOB_IDR,GPIOB_ODR ,GPIOB_BSRR ,GPIOB_LCKR,GPIOB_BFRL, GPIOB_BFRH}};


void GPIO_EnableClock(unsigned char PORT_ID) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	  *RCC_AHB1ENR |= (0x01 << PORT_ID);
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]


}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023830 	.word	0x40023830

08000204 <GPIO_Init>:

void GPIO_Init(unsigned char PORT_ID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000204:	b490      	push	{r4, r7}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4604      	mov	r4, r0
 800020c:	4608      	mov	r0, r1
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	4623      	mov	r3, r4
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	4603      	mov	r3, r0
 8000218:	71bb      	strb	r3, [r7, #6]
 800021a:	460b      	mov	r3, r1
 800021c:	717b      	strb	r3, [r7, #5]
 800021e:	4613      	mov	r3, r2
 8000220:	713b      	strb	r3, [r7, #4]

      *lookuptable[PORT_ID][0] &= ~(0x03 << 2 * PinNum);
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	4956      	ldr	r1, [pc, #344]	; (8000380 <GPIO_Init+0x17c>)
 8000226:	4613      	mov	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	00db      	lsls	r3, r3, #3
 800022e:	440b      	add	r3, r1
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	6819      	ldr	r1, [r3, #0]
 8000234:	79bb      	ldrb	r3, [r7, #6]
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	2203      	movs	r2, #3
 800023a:	fa02 f303 	lsl.w	r3, r2, r3
 800023e:	43db      	mvns	r3, r3
 8000240:	461c      	mov	r4, r3
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	484e      	ldr	r0, [pc, #312]	; (8000380 <GPIO_Init+0x17c>)
 8000246:	4613      	mov	r3, r2
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4413      	add	r3, r2
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	4403      	add	r3, r0
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	ea01 0204 	and.w	r2, r1, r4
 8000256:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][0] |= PinMode << 2 * PinNum;
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	4949      	ldr	r1, [pc, #292]	; (8000380 <GPIO_Init+0x17c>)
 800025c:	4613      	mov	r3, r2
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	4413      	add	r3, r2
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	440b      	add	r3, r1
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	6819      	ldr	r1, [r3, #0]
 800026a:	797a      	ldrb	r2, [r7, #5]
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	fa02 f303 	lsl.w	r3, r2, r3
 8000274:	461c      	mov	r4, r3
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	4841      	ldr	r0, [pc, #260]	; (8000380 <GPIO_Init+0x17c>)
 800027a:	4613      	mov	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	4403      	add	r3, r0
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	ea41 0204 	orr.w	r2, r1, r4
 800028a:	601a      	str	r2, [r3, #0]

      *lookuptable[PORT_ID][1] &= ~(1 << PinNum);
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	493c      	ldr	r1, [pc, #240]	; (8000380 <GPIO_Init+0x17c>)
 8000290:	4613      	mov	r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	4413      	add	r3, r2
 8000296:	00db      	lsls	r3, r3, #3
 8000298:	440b      	add	r3, r1
 800029a:	3304      	adds	r3, #4
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6819      	ldr	r1, [r3, #0]
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2201      	movs	r2, #1
 80002a4:	fa02 f303 	lsl.w	r3, r2, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	461c      	mov	r4, r3
 80002ac:	79fa      	ldrb	r2, [r7, #7]
 80002ae:	4834      	ldr	r0, [pc, #208]	; (8000380 <GPIO_Init+0x17c>)
 80002b0:	4613      	mov	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	4413      	add	r3, r2
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4403      	add	r3, r0
 80002ba:	3304      	adds	r3, #4
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	ea01 0204 	and.w	r2, r1, r4
 80002c2:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80002c4:	79fa      	ldrb	r2, [r7, #7]
 80002c6:	492e      	ldr	r1, [pc, #184]	; (8000380 <GPIO_Init+0x17c>)
 80002c8:	4613      	mov	r3, r2
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	440b      	add	r3, r1
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	793b      	ldrb	r3, [r7, #4]
 80002da:	f003 0201 	and.w	r2, r3, #1
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	461c      	mov	r4, r3
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	4825      	ldr	r0, [pc, #148]	; (8000380 <GPIO_Init+0x17c>)
 80002ea:	4613      	mov	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	4403      	add	r3, r0
 80002f4:	3304      	adds	r3, #4
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	ea41 0204 	orr.w	r2, r1, r4
 80002fc:	601a      	str	r2, [r3, #0]

      *lookuptable[PORT_ID][3] &= ~(0x03 << 2 * PinNum);
 80002fe:	79fa      	ldrb	r2, [r7, #7]
 8000300:	491f      	ldr	r1, [pc, #124]	; (8000380 <GPIO_Init+0x17c>)
 8000302:	4613      	mov	r3, r2
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	00db      	lsls	r3, r3, #3
 800030a:	440b      	add	r3, r1
 800030c:	330c      	adds	r3, #12
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6819      	ldr	r1, [r3, #0]
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	2203      	movs	r2, #3
 8000318:	fa02 f303 	lsl.w	r3, r2, r3
 800031c:	43db      	mvns	r3, r3
 800031e:	461c      	mov	r4, r3
 8000320:	79fa      	ldrb	r2, [r7, #7]
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <GPIO_Init+0x17c>)
 8000324:	4613      	mov	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4413      	add	r3, r2
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	4403      	add	r3, r0
 800032e:	330c      	adds	r3, #12
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	ea01 0204 	and.w	r2, r1, r4
 8000336:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][3] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000338:	79fa      	ldrb	r2, [r7, #7]
 800033a:	4911      	ldr	r1, [pc, #68]	; (8000380 <GPIO_Init+0x17c>)
 800033c:	4613      	mov	r3, r2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	440b      	add	r3, r1
 8000346:	330c      	adds	r3, #12
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6819      	ldr	r1, [r3, #0]
 800034c:	793b      	ldrb	r3, [r7, #4]
 800034e:	105b      	asrs	r3, r3, #1
 8000350:	f003 0203 	and.w	r2, r3, #3
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	fa02 f303 	lsl.w	r3, r2, r3
 800035c:	461c      	mov	r4, r3
 800035e:	79fa      	ldrb	r2, [r7, #7]
 8000360:	4807      	ldr	r0, [pc, #28]	; (8000380 <GPIO_Init+0x17c>)
 8000362:	4613      	mov	r3, r2
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	4413      	add	r3, r2
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	4403      	add	r3, r0
 800036c:	330c      	adds	r3, #12
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	ea41 0204 	orr.w	r2, r1, r4
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bc90      	pop	{r4, r7}
 800037e:	4770      	bx	lr
 8000380:	20000000 	.word	0x20000000

08000384 <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PORT_ID, unsigned char PinNum,
                            unsigned char Data) {
 8000384:	b490      	push	{r4, r7}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
 800038e:	460b      	mov	r3, r1
 8000390:	71bb      	strb	r3, [r7, #6]
 8000392:	4613      	mov	r3, r2
 8000394:	717b      	strb	r3, [r7, #5]
  unsigned char result;
      if (((*lookuptable[PORT_ID][0] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 8000396:	79fa      	ldrb	r2, [r7, #7]
 8000398:	492c      	ldr	r1, [pc, #176]	; (800044c <GPIO_WritePin+0xc8>)
 800039a:	4613      	mov	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4413      	add	r3, r2
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	440b      	add	r3, r1
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	79ba      	ldrb	r2, [r7, #6]
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	401a      	ands	r2, r3
 80003b4:	79bb      	ldrb	r3, [r7, #6]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	fa22 f303 	lsr.w	r3, r2, r3
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d13d      	bne.n	800043c <GPIO_WritePin+0xb8>
        if (Data) {
 80003c0:	797b      	ldrb	r3, [r7, #5]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d01b      	beq.n	80003fe <GPIO_WritePin+0x7a>
        	*lookuptable[PORT_ID][5] |= (1 << PinNum);
 80003c6:	79fa      	ldrb	r2, [r7, #7]
 80003c8:	4920      	ldr	r1, [pc, #128]	; (800044c <GPIO_WritePin+0xc8>)
 80003ca:	4613      	mov	r3, r2
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	4413      	add	r3, r2
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	440b      	add	r3, r1
 80003d4:	3314      	adds	r3, #20
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6819      	ldr	r1, [r3, #0]
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	2201      	movs	r2, #1
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	461c      	mov	r4, r3
 80003e4:	79fa      	ldrb	r2, [r7, #7]
 80003e6:	4819      	ldr	r0, [pc, #100]	; (800044c <GPIO_WritePin+0xc8>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	4403      	add	r3, r0
 80003f2:	3314      	adds	r3, #20
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	ea41 0204 	orr.w	r2, r1, r4
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	e01b      	b.n	8000436 <GPIO_WritePin+0xb2>
        } else {
        	*lookuptable[PORT_ID][5] &= ~(1 << PinNum);
 80003fe:	79fa      	ldrb	r2, [r7, #7]
 8000400:	4912      	ldr	r1, [pc, #72]	; (800044c <GPIO_WritePin+0xc8>)
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	440b      	add	r3, r1
 800040c:	3314      	adds	r3, #20
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	2201      	movs	r2, #1
 8000416:	fa02 f303 	lsl.w	r3, r2, r3
 800041a:	43db      	mvns	r3, r3
 800041c:	461c      	mov	r4, r3
 800041e:	79fa      	ldrb	r2, [r7, #7]
 8000420:	480a      	ldr	r0, [pc, #40]	; (800044c <GPIO_WritePin+0xc8>)
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	4403      	add	r3, r0
 800042c:	3314      	adds	r3, #20
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	ea01 0204 	and.w	r2, r1, r4
 8000434:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 8000436:	2300      	movs	r3, #0
 8000438:	73fb      	strb	r3, [r7, #15]
 800043a:	e001      	b.n	8000440 <GPIO_WritePin+0xbc>
      } else {
        result = NOK;
 800043c:	2301      	movs	r3, #1
 800043e:	73fb      	strb	r3, [r7, #15]
      }

  return result;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bc90      	pop	{r4, r7}
 800044a:	4770      	bx	lr
 800044c:	20000000 	.word	0x20000000

08000450 <GPIO_ReadPin>:

unsigned char GPIO_ReadPin(unsigned char PORT_ID, unsigned char PinNum) {
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	460a      	mov	r2, r1
 800045a:	71fb      	strb	r3, [r7, #7]
 800045c:	4613      	mov	r3, r2
 800045e:	71bb      	strb	r3, [r7, #6]
  unsigned char read = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	73fb      	strb	r3, [r7, #15]

      read = (*lookuptable[PORT_ID][4] & (1 << PinNum)) >> PinNum;
 8000464:	79fa      	ldrb	r2, [r7, #7]
 8000466:	490c      	ldr	r1, [pc, #48]	; (8000498 <GPIO_ReadPin+0x48>)
 8000468:	4613      	mov	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	4413      	add	r3, r2
 800046e:	00db      	lsls	r3, r3, #3
 8000470:	440b      	add	r3, r1
 8000472:	3310      	adds	r3, #16
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	79ba      	ldrb	r2, [r7, #6]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	401a      	ands	r2, r3
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	fa22 f303 	lsr.w	r3, r2, r3
 8000488:	73fb      	strb	r3, [r7, #15]

  return read;
 800048a:	7bfb      	ldrb	r3, [r7, #15]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	20000000 	.word	0x20000000

0800049c <init_Client>:
#include "stm32f4xx.h"


unsigned char button;

void init_Client(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	subscribe(update);
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <init_Client+0x10>)
 80004a2:	f000 f893 	bl	80005cc <subscribe>

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	080004b1 	.word	0x080004b1

080004b0 <update>:

void update(unsigned char data){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	Handle_data(data);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f804 	bl	80004ca <Handle_data>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <Handle_data>:
void Handle_data(unsigned char button)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b082      	sub	sp, #8
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	4603      	mov	r3, r0
 80004d2:	71fb      	strb	r3, [r7, #7]
	if(button==0)
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <Handle_data+0x1c>
	{
		GPIO_WritePin(0,1,0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2101      	movs	r1, #1
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ff50 	bl	8000384 <GPIO_WritePin>
	}
	else
	{
		GPIO_WritePin(0,1,1);
	}
}
 80004e4:	e004      	b.n	80004f0 <Handle_data+0x26>
		GPIO_WritePin(0,1,1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2101      	movs	r1, #1
 80004ea:	2000      	movs	r0, #0
 80004ec:	f7ff ff4a 	bl	8000384 <GPIO_WritePin>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	f003 021f 	and.w	r2, r3, #31
 8000508:	4907      	ldr	r1, [pc, #28]	; (8000528 <NVIC_EnableIRQ+0x30>)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	095b      	lsrs	r3, r3, #5
 8000510:	2001      	movs	r0, #1
 8000512:	fa00 f202 	lsl.w	r2, r0, r2
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000e100 	.word	0xe000e100

0800052c <StartTimer>:
#include "stm32f4xx.h"
#include "poller.h"


void StartTimer(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	/*Enable timer 2*/
	RCC->APB1ENR |=(1u<<0);
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <StartTimer+0x48>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <StartTimer+0x48>)
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600-1;
 800053c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000540:	f240 623f 	movw	r2, #1599	; 0x63f
 8000544:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;
 8000546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054a:	2264      	movs	r2, #100	; 0x64
 800054c:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clear timer counter*/
	TIM2->CNT = 0;
 800054e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable  timer*/
	TIM2->CR1 |= (1u<<0);
 8000556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	b29b      	uxth	r3, r3
 800055e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	b29b      	uxth	r3, r3
 8000568:	8013      	strh	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	40023800 	.word	0x40023800

08000578 <EnableInterrupt>:
void StopTimer(void)
{
	TIM2->CR1 &= ~(1u<<0);
}
void EnableInterrupt(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/*Enable timer interrupt*/
	TIM2->DIER |= (1<<0);
 800057c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000580:	899b      	ldrh	r3, [r3, #12]
 8000582:	b29b      	uxth	r3, r3
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	b29b      	uxth	r3, r3
 800058e:	8193      	strh	r3, [r2, #12]
	/*Enable timer interrupt NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 8000590:	201c      	movs	r0, #28
 8000592:	f7ff ffb1 	bl	80004f8 <NVIC_EnableIRQ>

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <CallPollingFunction>:
	/*Enable timer interrupt*/
	TIM2->DIER &= ~(1u<<0);
}

void CallPollingFunction(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
	Poll_getter();
 800059e:	f000 f855 	bl	800064c <Poll_getter>
	Poll_setter();
 80005a2:	f000 f859 	bl	8000658 <Poll_setter>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <Get_Data>:
void (*functionsptr[MAXFUNCTIONS])(unsigned char);

unsigned char data;

unsigned char Get_Data(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	data=GPIO_ReadPin(0,0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ff4c 	bl	8000450 <GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <Get_Data+0x1c>)
 80005be:	701a      	strb	r2, [r3, #0]
	return data;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <Get_Data+0x1c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000007c 	.word	0x2000007c

080005cc <subscribe>:

void subscribe(void (*ptr)(unsigned char))
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	for (int i=0 ; i<=MAXFUNCTIONS ; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00d      	b.n	80005f6 <subscribe+0x2a>
	{
		if((functionsptr[i] == 0))
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <subscribe+0x40>)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d104      	bne.n	80005f0 <subscribe+0x24>
		{
			functionsptr[i]=ptr;
 80005e6:	4909      	ldr	r1, [pc, #36]	; (800060c <subscribe+0x40>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0 ; i<=MAXFUNCTIONS ; i++)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	ddee      	ble.n	80005da <subscribe+0xe>
			//unsubscribe(&i);
		}
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000078 	.word	0x20000078

08000610 <notify>:
{
	functionsptr[*Y]= 0;
}

void notify()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	//call update fn
	for (int i=0 ; i <= MAXFUNCTIONS ; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e00a      	b.n	8000632 <notify+0x22>
		(*functionsptr[i])(data);
 800061c:	4a09      	ldr	r2, [pc, #36]	; (8000644 <notify+0x34>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <notify+0x38>)
 8000626:	7812      	ldrb	r2, [r2, #0]
 8000628:	4610      	mov	r0, r2
 800062a:	4798      	blx	r3
	for (int i=0 ; i <= MAXFUNCTIONS ; i++){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b01      	cmp	r3, #1
 8000636:	ddf1      	ble.n	800061c <notify+0xc>
	}

}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000078 	.word	0x20000078
 8000648:	2000007c 	.word	0x2000007c

0800064c <Poll_getter>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll_getter(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	Get_Data();
 8000650:	f7ff ffac 	bl	80005ac <Get_Data>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <Poll_setter>:

void Poll_setter(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

	if(polling_enabled && (!counter))
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <Poll_setter+0x3c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d005      	beq.n	8000670 <Poll_setter+0x18>
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <Poll_setter+0x40>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <Poll_setter+0x18>
	{
		notify();
 800066c:	f7ff ffd0 	bl	8000610 <notify>
	}
	counter++;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <Poll_setter+0x40>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <Poll_setter+0x40>)
 8000678:	6013      	str	r3, [r2, #0]
	counter = counter%polling_counter;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <Poll_setter+0x40>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <Poll_setter+0x44>)
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	fb93 f1f2 	sdiv	r1, r3, r2
 8000686:	fb02 f201 	mul.w	r2, r2, r1
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	4a02      	ldr	r2, [pc, #8]	; (8000698 <Poll_setter+0x40>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000050 	.word	0x20000050
 8000698:	20000074 	.word	0x20000074
 800069c:	20000054 	.word	0x20000054

080006a0 <StartPolling>:

void StartPolling(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	polling_enabled=1;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <StartPolling+0x14>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000050 	.word	0x20000050

080006b8 <SetPollingTime>:
{
	polling_enabled=0;
}

void SetPollingTime(int polling_time)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	polling_counter = polling_time/100;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <SetPollingTime+0x28>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1152      	asrs	r2, r2, #5
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <SetPollingTime+0x2c>)
 80006d0:	6013      	str	r3, [r2, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	20000054 	.word	0x20000054

080006e8 <main>:


unsigned char returned;

int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	GPIO_EnableClock(0);                  /*Enable port A clock*/
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fd71 	bl	80001d4 <GPIO_EnableClock>
	GPIO_Init(0, 0, INPUT, PULL_UP);    /*configuration for pin 0(BUTTON)*/
 80006f2:	2302      	movs	r3, #2
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff fd83 	bl	8000204 <GPIO_Init>
    GPIO_Init(0, 1,OUTPUT,PUSH_PULL);  	  /*configuration for pin 1(LED)*/
 80006fe:	2300      	movs	r3, #0
 8000700:	2201      	movs	r2, #1
 8000702:	2101      	movs	r1, #1
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fd7d 	bl	8000204 <GPIO_Init>
    init_Client();
 800070a:	f7ff fec7 	bl	800049c <init_Client>
	StartTimer();
 800070e:	f7ff ff0d 	bl	800052c <StartTimer>
	EnableInterrupt();
 8000712:	f7ff ff31 	bl	8000578 <EnableInterrupt>
	SetPollingTime(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f7ff ffcd 	bl	80006b8 <SetPollingTime>
	StartPolling();
 800071e:	f7ff ffbf 	bl	80006a0 <StartPolling>


	while(1)
 8000722:	e7fe      	b.n	8000722 <main+0x3a>

08000724 <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	TIM2->SR &=~(1<<0);
 8000728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800072c:	8a1b      	ldrh	r3, [r3, #16]
 800072e:	b29b      	uxth	r3, r3
 8000730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	b29b      	uxth	r3, r3
 800073a:	8213      	strh	r3, [r2, #16]
	CallPollingFunction();
 800073c:	f7ff ff2d 	bl	800059a <CallPollingFunction>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <SystemInit+0x60>)
 800074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <SystemInit+0x60>)
 8000750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <SystemInit+0x64>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <SystemInit+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x64>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <SystemInit+0x64>)
 8000770:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000778:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <SystemInit+0x64>)
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <SystemInit+0x68>)
 800077e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <SystemInit+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <SystemInit+0x64>)
 8000786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800078a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SystemInit+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000792:	f000 f80d 	bl	80007b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000796:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <SystemInit+0x60>)
 8000798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079c:	609a      	str	r2, [r3, #8]
#endif
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	40023800 	.word	0x40023800
 80007ac:	24003010 	.word	0x24003010

080007b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SetSysClock+0xe4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a34      	ldr	r2, [pc, #208]	; (8000894 <SetSysClock+0xe4>)
 80007c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <SetSysClock+0xe4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3301      	adds	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d103      	bne.n	80007e8 <SetSysClock+0x38>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80007e6:	d1f0      	bne.n	80007ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80007e8:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <SetSysClock+0xe4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80007f4:	2301      	movs	r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	e001      	b.n	80007fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d140      	bne.n	8000886 <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <SetSysClock+0xe4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a22      	ldr	r2, [pc, #136]	; (8000894 <SetSysClock+0xe4>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <SetSysClock+0xe8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <SetSysClock+0xe8>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <SetSysClock+0xe4>)
 800081e:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <SetSysClock+0xe4>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <SetSysClock+0xe4>)
 8000826:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <SetSysClock+0xe4>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <SetSysClock+0xe4>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <SetSysClock+0xe4>)
 8000832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000836:	6093      	str	r3, [r2, #8]
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <SetSysClock+0xe4>)
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <SetSysClock+0xec>)
 800083c:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <SetSysClock+0xe4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <SetSysClock+0xe4>)
 8000844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000848:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800084a:	bf00      	nop
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <SetSysClock+0xe4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f9      	beq.n	800084c <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
#endif /* STM32F413_423xx */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <SetSysClock+0xf0>)
 800085a:	f240 7202 	movw	r2, #1794	; 0x702
 800085e:	601a      	str	r2, [r3, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <SetSysClock+0xe4>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <SetSysClock+0xe4>)
 8000866:	f023 0303 	bic.w	r3, r3, #3
 800086a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <SetSysClock+0xe4>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <SetSysClock+0xe4>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000878:	bf00      	nop
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SetSysClock+0xe4>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 030c 	and.w	r3, r3, #12
 8000882:	2b08      	cmp	r3, #8
 8000884:	d1f9      	bne.n	800087a <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000
 800089c:	07415419 	.word	0x07415419
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ce:	f7ff ff39 	bl	8000744 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008d2:	f000 f811 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff ff07 	bl	80006e8 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   r0, =_estack
 80008dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80008e8:	08000960 	.word	0x08000960
  ldr r2, =_sbss
 80008ec:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80008f0:	20000080 	.word	0x20000080

080008f4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4d0d      	ldr	r5, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2600      	movs	r6, #0
 8000904:	42a6      	cmp	r6, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4d0b      	ldr	r5, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 f818 	bl	8000940 <_init>
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2600      	movs	r6, #0
 8000916:	42a6      	cmp	r6, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000920:	4798      	blx	r3
 8000922:	3601      	adds	r6, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f855 3b04 	ldr.w	r3, [r5], #4
 800092a:	4798      	blx	r3
 800092c:	3601      	adds	r6, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	08000958 	.word	0x08000958
 8000934:	08000958 	.word	0x08000958
 8000938:	08000958 	.word	0x08000958
 800093c:	0800095c 	.word	0x0800095c

08000940 <_init>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	bf00      	nop
 8000944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000946:	bc08      	pop	{r3}
 8000948:	469e      	mov	lr, r3
 800094a:	4770      	bx	lr

0800094c <_fini>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr
