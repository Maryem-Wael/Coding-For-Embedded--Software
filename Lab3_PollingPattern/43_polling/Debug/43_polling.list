
43_polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000478  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800060c  0800060c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  0800060c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000610  08000610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  0800061c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000028  0800061c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017ed  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000607  00000000  00000000  00021825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00021e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00021f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a194  00000000  00000000  00022058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000179f  00000000  00000000  0002c1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00035de6  00000000  00000000  0002d98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00063771  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002e8  00000000  00000000  000637c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005f4 	.word	0x080005f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080005f4 	.word	0x080005f4

080001d4 <Handle_data>:
 */
#include "stm32f4xx.h"
#include "PollingDataClient.h"

void Handle_data(float data)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	ed87 0a01 	vstr	s0, [r7, #4]
	if(data>900.0)
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000218 <Handle_data+0x44>
 80001e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80001ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ee:	dd06      	ble.n	80001fe <Handle_data+0x2a>
	{
		GPIOA->ODR |= (1u<<5);
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <Handle_data+0x48>)
 80001f2:	695b      	ldr	r3, [r3, #20]
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <Handle_data+0x48>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOA->ODR &= ~(1u<<5);
	}
}
 80001fc:	e005      	b.n	800020a <Handle_data+0x36>
		GPIOA->ODR &= ~(1u<<5);
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <Handle_data+0x48>)
 8000200:	695b      	ldr	r3, [r3, #20]
 8000202:	4a06      	ldr	r2, [pc, #24]	; (800021c <Handle_data+0x48>)
 8000204:	f023 0320 	bic.w	r3, r3, #32
 8000208:	6153      	str	r3, [r2, #20]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	44610000 	.word	0x44610000
 800021c:	40020000 	.word	0x40020000

08000220 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <NVIC_EnableIRQ+0x30>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <StartTimer>:
#include "stm32f4xx.h"
#include "poller.h"


void StartTimer(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	/*Enable timer 2*/
	RCC->APB1ENR |=(1u<<0);
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <StartTimer+0x48>)
 800025a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800025c:	4a0f      	ldr	r2, [pc, #60]	; (800029c <StartTimer+0x48>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600-1;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000268:	f240 623f 	movw	r2, #1599	; 0x63f
 800026c:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;
 800026e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000272:	2264      	movs	r2, #100	; 0x64
 8000274:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clear timer counter*/
	TIM2->CNT = 0;
 8000276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027a:	2200      	movs	r2, #0
 800027c:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable  timer*/
	TIM2->CR1 |= (1u<<0);
 800027e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	b29b      	uxth	r3, r3
 8000286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	b29b      	uxth	r3, r3
 8000290:	8013      	strh	r3, [r2, #0]
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40023800 	.word	0x40023800

080002a0 <EnableInterrupt>:
void StopTimer(void)
{
	TIM2->CR1 &= ~(1u<<0);
}
void EnableInterrupt(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	/*Enable timer interrupt*/
	TIM2->DIER |= (1<<0);
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a8:	899b      	ldrh	r3, [r3, #12]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	8193      	strh	r3, [r2, #12]
	/*Enable timer interrupt NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 80002b8:	201c      	movs	r0, #28
 80002ba:	f7ff ffb1 	bl	8000220 <NVIC_EnableIRQ>

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <CallPollingFunction>:
	/*Enable timer interrupt*/
	TIM2->DIER &= ~(1u<<0);
}

void CallPollingFunction(void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	af00      	add	r7, sp, #0
	Poll();
 80002c6:	f000 f811 	bl	80002ec <Poll>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <Get_Data>:
#include "device.h"

float data;

float Get_Data(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	return 100.0;
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <Get_Data+0x18>)
 80002d6:	ee07 3a90 	vmov	s15, r3
}
 80002da:	eeb0 0a67 	vmov.f32	s0, s15
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	42c80000 	.word	0x42c80000

080002ec <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
	if(polling_enabled && (!counter))
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <Poll+0x50>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d00b      	beq.n	8000312 <Poll+0x26>
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <Poll+0x54>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d107      	bne.n	8000312 <Poll+0x26>
	{
		float data;
		data = Get_Data();
 8000302:	f7ff ffe5 	bl	80002d0 <Get_Data>
 8000306:	ed87 0a01 	vstr	s0, [r7, #4]
		Handle_data(data);
 800030a:	ed97 0a01 	vldr	s0, [r7, #4]
 800030e:	f7ff ff61 	bl	80001d4 <Handle_data>

	}
	counter++;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <Poll+0x54>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	4a09      	ldr	r2, [pc, #36]	; (8000340 <Poll+0x54>)
 800031a:	6013      	str	r3, [r2, #0]
	counter = counter%polling_counter;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <Poll+0x54>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <Poll+0x58>)
 8000322:	6812      	ldr	r2, [r2, #0]
 8000324:	fb93 f1f2 	sdiv	r1, r3, r2
 8000328:	fb02 f201 	mul.w	r2, r2, r1
 800032c:	1a9b      	subs	r3, r3, r2
 800032e:	4a04      	ldr	r2, [pc, #16]	; (8000340 <Poll+0x54>)
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000000 	.word	0x20000000
 8000340:	20000024 	.word	0x20000024
 8000344:	20000004 	.word	0x20000004

08000348 <StartPolling>:

void StartPolling(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	polling_enabled=1;
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <StartPolling+0x14>)
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	20000000 	.word	0x20000000

08000360 <SetPollingTime>:
{
	polling_enabled=0;
}

void SetPollingTime(int polling_time)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	polling_counter = polling_time/100;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a07      	ldr	r2, [pc, #28]	; (8000388 <SetPollingTime+0x28>)
 800036c:	fb82 1203 	smull	r1, r2, r2, r3
 8000370:	1152      	asrs	r2, r2, #5
 8000372:	17db      	asrs	r3, r3, #31
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	4a05      	ldr	r2, [pc, #20]	; (800038c <SetPollingTime+0x2c>)
 8000378:	6013      	str	r3, [r2, #0]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	51eb851f 	.word	0x51eb851f
 800038c:	20000004 	.word	0x20000004

08000390 <main>:
#include "poller.h"



int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	/*initialize pin6 portA as output*/
	RCC->AHB1ENR |=(1<<0);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <main+0x40>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <main+0x40>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |=(1<<10);
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <main+0x44>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <main+0x44>)
 80003a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1<<11);
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <main+0x44>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <main+0x44>)
 80003b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003b6:	6013      	str	r3, [r2, #0]


	StartTimer();
 80003b8:	f7ff ff4c 	bl	8000254 <StartTimer>
	EnableInterrupt();
 80003bc:	f7ff ff70 	bl	80002a0 <EnableInterrupt>
	SetPollingTime(500);
 80003c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c4:	f7ff ffcc 	bl	8000360 <SetPollingTime>
	StartPolling();
 80003c8:	f7ff ffbe 	bl	8000348 <StartPolling>

	while(1)
 80003cc:	e7fe      	b.n	80003cc <main+0x3c>
 80003ce:	bf00      	nop
 80003d0:	40023800 	.word	0x40023800
 80003d4:	40020000 	.word	0x40020000

080003d8 <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	TIM2->SR &=~(1<<0);
 80003dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e0:	8a1b      	ldrh	r3, [r3, #16]
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e8:	f023 0301 	bic.w	r3, r3, #1
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	8213      	strh	r3, [r2, #16]
	CallPollingFunction();
 80003f0:	f7ff ff67 	bl	80002c2 <CallPollingFunction>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <SystemInit+0x60>)
 80003fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000402:	4a15      	ldr	r2, [pc, #84]	; (8000458 <SystemInit+0x60>)
 8000404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <SystemInit+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a12      	ldr	r2, [pc, #72]	; (800045c <SystemInit+0x64>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <SystemInit+0x64>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <SystemInit+0x64>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <SystemInit+0x64>)
 8000424:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800042c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <SystemInit+0x64>)
 8000430:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <SystemInit+0x68>)
 8000432:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <SystemInit+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a08      	ldr	r2, [pc, #32]	; (800045c <SystemInit+0x64>)
 800043a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800043e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <SystemInit+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000446:	f000 f80d 	bl	8000464 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800044a:	4b03      	ldr	r3, [pc, #12]	; (8000458 <SystemInit+0x60>)
 800044c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000450:	609a      	str	r2, [r3, #8]
#endif
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	e000ed00 	.word	0xe000ed00
 800045c:	40023800 	.word	0x40023800
 8000460:	24003010 	.word	0x24003010

08000464 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000472:	4b35      	ldr	r3, [pc, #212]	; (8000548 <SetSysClock+0xe4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a34      	ldr	r2, [pc, #208]	; (8000548 <SetSysClock+0xe4>)
 8000478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800047c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800047e:	4b32      	ldr	r3, [pc, #200]	; (8000548 <SetSysClock+0xe4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d103      	bne.n	800049c <SetSysClock+0x38>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800049a:	d1f0      	bne.n	800047e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <SetSysClock+0xe4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004a8:	2301      	movs	r3, #1
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	e001      	b.n	80004b2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d140      	bne.n	800053a <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <SetSysClock+0xe4>)
 80004ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004bc:	4a22      	ldr	r2, [pc, #136]	; (8000548 <SetSysClock+0xe4>)
 80004be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80004c4:	4b21      	ldr	r3, [pc, #132]	; (800054c <SetSysClock+0xe8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a20      	ldr	r2, [pc, #128]	; (800054c <SetSysClock+0xe8>)
 80004ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004ce:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <SetSysClock+0xe4>)
 80004d2:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <SetSysClock+0xe4>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <SetSysClock+0xe4>)
 80004da:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <SetSysClock+0xe4>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <SetSysClock+0xe4>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a18      	ldr	r2, [pc, #96]	; (8000548 <SetSysClock+0xe4>)
 80004e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ea:	6093      	str	r3, [r2, #8]
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80004ec:	4b16      	ldr	r3, [pc, #88]	; (8000548 <SetSysClock+0xe4>)
 80004ee:	4a18      	ldr	r2, [pc, #96]	; (8000550 <SetSysClock+0xec>)
 80004f0:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <SetSysClock+0xe4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <SetSysClock+0xe4>)
 80004f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004fe:	bf00      	nop
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <SetSysClock+0xe4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
#endif /* STM32F413_423xx */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <SetSysClock+0xf0>)
 800050e:	f240 7202 	movw	r2, #1794	; 0x702
 8000512:	601a      	str	r2, [r3, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <SetSysClock+0xe4>)
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <SetSysClock+0xe4>)
 800051a:	f023 0303 	bic.w	r3, r3, #3
 800051e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <SetSysClock+0xe4>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4a08      	ldr	r2, [pc, #32]	; (8000548 <SetSysClock+0xe4>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800052c:	bf00      	nop
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <SetSysClock+0xe4>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	f003 030c 	and.w	r3, r3, #12
 8000536:	2b08      	cmp	r3, #8
 8000538:	d1f9      	bne.n	800052e <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800
 800054c:	40007000 	.word	0x40007000
 8000550:	07415419 	.word	0x07415419
 8000554:	40023c00 	.word	0x40023c00

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490e      	ldr	r1, [pc, #56]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0b      	ldr	r4, [pc, #44]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000582:	f7ff ff39 	bl	80003f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000586:	f000 f811 	bl	80005ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff ff01 	bl	8000390 <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800059c:	08000614 	.word	0x08000614
  ldr r2, =_sbss
 80005a0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80005a4:	20000028 	.word	0x20000028

080005a8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4d0d      	ldr	r5, [pc, #52]	; (80005e4 <__libc_init_array+0x38>)
 80005b0:	4c0d      	ldr	r4, [pc, #52]	; (80005e8 <__libc_init_array+0x3c>)
 80005b2:	1b64      	subs	r4, r4, r5
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	2600      	movs	r6, #0
 80005b8:	42a6      	cmp	r6, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	4d0b      	ldr	r5, [pc, #44]	; (80005ec <__libc_init_array+0x40>)
 80005be:	4c0c      	ldr	r4, [pc, #48]	; (80005f0 <__libc_init_array+0x44>)
 80005c0:	f000 f818 	bl	80005f4 <_init>
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	2600      	movs	r6, #0
 80005ca:	42a6      	cmp	r6, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d4:	4798      	blx	r3
 80005d6:	3601      	adds	r6, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f855 3b04 	ldr.w	r3, [r5], #4
 80005de:	4798      	blx	r3
 80005e0:	3601      	adds	r6, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	0800060c 	.word	0x0800060c
 80005e8:	0800060c 	.word	0x0800060c
 80005ec:	0800060c 	.word	0x0800060c
 80005f0:	08000610 	.word	0x08000610

080005f4 <_init>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr

08000600 <_fini>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr
