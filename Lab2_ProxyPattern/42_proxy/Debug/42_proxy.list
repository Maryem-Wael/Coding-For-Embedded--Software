
42_proxy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000624  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080007b8  080007b8  000107b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007d4  080007d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080007d4  080007d4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d4  080007d4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d4  080007d4  000107d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080007dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000001c  080007f8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000040  080007f8  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f53  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a4  00000000  00000000  00020f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00021448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00021520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a0bc  00000000  00000000  000215d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001252  00000000  00000000  0002b694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000359bb  00000000  00000000  0002c8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000622a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  000622f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007a0 	.word	0x080007a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	080007a0 	.word	0x080007a0

080001d4 <DIO_Init>:
 GPIOC,
 GPIOD};


void DIO_Init(void)
 {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
     unsigned char Loop;

     for(Loop = (unsigned char)0; Loop < DIO_NUM_OF_CHANNELS; Loop++)
 80001da:	2300      	movs	r3, #0
 80001dc:	73fb      	strb	r3, [r7, #15]
 80001de:	e0c9      	b.n	8000374 <DIO_Init+0x1a0>
     {
         unsigned char PortId;
         /*read the port Id from link time configuration*/
         PortId = DIO_ConfigParam[Loop].PortId;
 80001e0:	7bfa      	ldrb	r2, [r7, #15]
 80001e2:	496a      	ldr	r1, [pc, #424]	; (800038c <DIO_Init+0x1b8>)
 80001e4:	4613      	mov	r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4413      	add	r3, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	73bb      	strb	r3, [r7, #14]

         /*verify Port Id*/
         if(PortId < NUM_OF_PORTS)
 80001f0:	7bbb      	ldrb	r3, [r7, #14]
 80001f2:	2b03      	cmp	r3, #3
 80001f4:	f200 80c3 	bhi.w	800037e <DIO_Init+0x1aa>
         {
        	 /*Enable clock*/
        	 RCC->AHB1ENR |= (1<<PortId);
 80001f8:	4b65      	ldr	r3, [pc, #404]	; (8000390 <DIO_Init+0x1bc>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	7bba      	ldrb	r2, [r7, #14]
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a62      	ldr	r2, [pc, #392]	; (8000390 <DIO_Init+0x1bc>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6313      	str	r3, [r2, #48]	; 0x30
        	 GPIO_TypeDef * GPIOx =Ports[PortId];
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	4a61      	ldr	r2, [pc, #388]	; (8000394 <DIO_Init+0x1c0>)
 8000210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000214:	60bb      	str	r3, [r7, #8]
        	 unsigned char PinNumber = DIO_ConfigParam[Loop].PinNum;
 8000216:	7bfa      	ldrb	r2, [r7, #15]
 8000218:	495c      	ldr	r1, [pc, #368]	; (800038c <DIO_Init+0x1b8>)
 800021a:	4613      	mov	r3, r2
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	4413      	add	r3, r2
 8000220:	440b      	add	r3, r1
 8000222:	3301      	adds	r3, #1
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	71fb      	strb	r3, [r7, #7]
             /*this  bit always = 0 in input or output mode */
        	 GPIOx->MODER &= ~(1<<(PinNumber*2+1));
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	79fa      	ldrb	r2, [r7, #7]
 800022e:	0052      	lsls	r2, r2, #1
 8000230:	3201      	adds	r2, #1
 8000232:	2101      	movs	r1, #1
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	43d2      	mvns	r2, r2
 800023a:	401a      	ands	r2, r3
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	601a      	str	r2, [r3, #0]

        	 /*if output*/
             if(DIO_ConfigParam[Loop].PortDirection)
 8000240:	7bfa      	ldrb	r2, [r7, #15]
 8000242:	4952      	ldr	r1, [pc, #328]	; (800038c <DIO_Init+0x1b8>)
 8000244:	4613      	mov	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4413      	add	r3, r2
 800024a:	440b      	add	r3, r1
 800024c:	3302      	adds	r3, #2
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d028      	beq.n	80002a6 <DIO_Init+0xd2>
             {
            	 /*if output type open drain*/
            	 GPIOx->MODER |= (1<<(PinNumber*2));
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	0052      	lsls	r2, r2, #1
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	431a      	orrs	r2, r3
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	601a      	str	r2, [r3, #0]
            	 if(DIO_ConfigParam[Loop].OutputType)
 8000268:	7bfa      	ldrb	r2, [r7, #15]
 800026a:	4948      	ldr	r1, [pc, #288]	; (800038c <DIO_Init+0x1b8>)
 800026c:	4613      	mov	r3, r2
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4413      	add	r3, r2
 8000272:	440b      	add	r3, r1
 8000274:	3304      	adds	r3, #4
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d009      	beq.n	8000290 <DIO_Init+0xbc>
            	 {
            		 GPIOx->OTYPER |= (1<<(PinNumber));
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	2101      	movs	r1, #1
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	431a      	orrs	r2, r3
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	e06e      	b.n	800036e <DIO_Init+0x19a>
            	 }
            	 /*if output type push-pull*/
            	 else
            	 {
            		 GPIOx->OTYPER &= ~(1<<(PinNumber));
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	79fa      	ldrb	r2, [r7, #7]
 8000296:	2101      	movs	r1, #1
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	43d2      	mvns	r2, r2
 800029e:	401a      	ands	r2, r3
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	e063      	b.n	800036e <DIO_Init+0x19a>

             }
             /*if input*/
             else
             {
            	 GPIOx->MODER &= ~(1<<(PinNumber*2));
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	79fa      	ldrb	r2, [r7, #7]
 80002ac:	0052      	lsls	r2, r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	601a      	str	r2, [r3, #0]
            	 /*pull up */
            	 if(DIO_ConfigParam[Loop].PuPd == 1u)
 80002bc:	7bfa      	ldrb	r2, [r7, #15]
 80002be:	4933      	ldr	r1, [pc, #204]	; (800038c <DIO_Init+0x1b8>)
 80002c0:	4613      	mov	r3, r2
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	440b      	add	r3, r1
 80002c8:	3303      	adds	r3, #3
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d116      	bne.n	80002fe <DIO_Init+0x12a>
            	 {
            		 GPIOx->PUPDR |= (1<<(PinNumber*2));
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	0052      	lsls	r2, r2, #1
 80002d8:	2101      	movs	r1, #1
 80002da:	fa01 f202 	lsl.w	r2, r1, r2
 80002de:	431a      	orrs	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60da      	str	r2, [r3, #12]
            		 GPIOx->PUPDR &= ~(1<<(PinNumber*2+1));
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	79fa      	ldrb	r2, [r7, #7]
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	3201      	adds	r2, #1
 80002ee:	2101      	movs	r1, #1
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	43d2      	mvns	r2, r2
 80002f6:	401a      	ands	r2, r3
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	e037      	b.n	800036e <DIO_Init+0x19a>
            	 }
            	 /*pull down */
            	 else if(DIO_ConfigParam[Loop].PuPd == 2u)
 80002fe:	7bfa      	ldrb	r2, [r7, #15]
 8000300:	4922      	ldr	r1, [pc, #136]	; (800038c <DIO_Init+0x1b8>)
 8000302:	4613      	mov	r3, r2
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	440b      	add	r3, r1
 800030a:	3303      	adds	r3, #3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d116      	bne.n	8000340 <DIO_Init+0x16c>
				 {
            		 GPIOx->PUPDR |= (1<<(PinNumber*2+1));
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	79fa      	ldrb	r2, [r7, #7]
 8000318:	0052      	lsls	r2, r2, #1
 800031a:	3201      	adds	r2, #1
 800031c:	2101      	movs	r1, #1
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	431a      	orrs	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	60da      	str	r2, [r3, #12]
            		 GPIOx->PUPDR &= ~(1<<(PinNumber*2));
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	79fa      	ldrb	r2, [r7, #7]
 800032e:	0052      	lsls	r2, r2, #1
 8000330:	2101      	movs	r1, #1
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	401a      	ands	r2, r3
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	e016      	b.n	800036e <DIO_Init+0x19a>
				 }
            	 /* No pull-up, pull-down */
            	 else
            	 {
            		 GPIOx->PUPDR &= ~(1<<(PinNumber*2));
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	79fa      	ldrb	r2, [r7, #7]
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	401a      	ands	r2, r3
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	60da      	str	r2, [r3, #12]
            		 GPIOx->PUPDR &= ~(1<<(PinNumber*2+1));
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	79fa      	ldrb	r2, [r7, #7]
 800035c:	0052      	lsls	r2, r2, #1
 800035e:	3201      	adds	r2, #1
 8000360:	2101      	movs	r1, #1
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	43d2      	mvns	r2, r2
 8000368:	401a      	ands	r2, r3
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	60da      	str	r2, [r3, #12]
     for(Loop = (unsigned char)0; Loop < DIO_NUM_OF_CHANNELS; Loop++)
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	3301      	adds	r3, #1
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b04      	cmp	r3, #4
 8000378:	f67f af32 	bls.w	80001e0 <DIO_Init+0xc>
         {
             /*invalid port*/
             break;
         }
     }
 }
 800037c:	e000      	b.n	8000380 <DIO_Init+0x1ac>
             break;
 800037e:	bf00      	nop
 }
 8000380:	bf00      	nop
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	080007b8 	.word	0x080007b8
 8000390:	40023800 	.word	0x40023800
 8000394:	20000000 	.word	0x20000000

08000398 <DIO_ChannelWrite_Group>:
		}

	}
}
void DIO_ChannelWrite_Group(unsigned char ChannelsID[WriteChannelArraySize], unsigned char Data[WriteChannelArraySize])
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]

  for(unsigned char i=0 ; i < WriteChannelArraySize ; i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
 80003a6:	e057      	b.n	8000458 <DIO_ChannelWrite_Group+0xc0>
	{
	  if(ChannelsID[i]<DIO_NUM_OF_CHANNELS){
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d84e      	bhi.n	8000452 <DIO_ChannelWrite_Group+0xba>
		   unsigned char PortId;
		   PortId = DIO_ConfigParam[ChannelsID[i]].PortId;
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	4a2b      	ldr	r2, [pc, #172]	; (800046c <DIO_ChannelWrite_Group+0xd4>)
 80003c0:	460b      	mov	r3, r1
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	440b      	add	r3, r1
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	73bb      	strb	r3, [r7, #14]
		   if(DIO_ConfigParam[ChannelsID[i]].PortDirection)
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4619      	mov	r1, r3
 80003d6:	4a25      	ldr	r2, [pc, #148]	; (800046c <DIO_ChannelWrite_Group+0xd4>)
 80003d8:	460b      	mov	r3, r1
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	440b      	add	r3, r1
 80003de:	4413      	add	r3, r2
 80003e0:	3302      	adds	r3, #2
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d034      	beq.n	8000452 <DIO_ChannelWrite_Group+0xba>
		   {
			   GPIO_TypeDef * GPIOx =Ports[PortId];
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	4a21      	ldr	r2, [pc, #132]	; (8000470 <DIO_ChannelWrite_Group+0xd8>)
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	60bb      	str	r3, [r7, #8]
			   if(Data[i]){
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	4413      	add	r3, r2
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d014      	beq.n	8000428 <DIO_ChannelWrite_Group+0x90>
				   GPIOx->ODR|=(1<<(DIO_ConfigParam[ChannelsID[i]].PinNum));
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	440b      	add	r3, r1
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	4917      	ldr	r1, [pc, #92]	; (800046c <DIO_ChannelWrite_Group+0xd4>)
 800040e:	4603      	mov	r3, r0
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4403      	add	r3, r0
 8000414:	440b      	add	r3, r1
 8000416:	3301      	adds	r3, #1
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	4619      	mov	r1, r3
 800041c:	2301      	movs	r3, #1
 800041e:	408b      	lsls	r3, r1
 8000420:	431a      	orrs	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	615a      	str	r2, [r3, #20]
 8000426:	e014      	b.n	8000452 <DIO_ChannelWrite_Group+0xba>
			   }

		       else
		       {
			     GPIOx->ODR &= ~(1<<(DIO_ConfigParam[ChannelsID[i]].PinNum));
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	6879      	ldr	r1, [r7, #4]
 8000430:	440b      	add	r3, r1
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <DIO_ChannelWrite_Group+0xd4>)
 8000438:	4603      	mov	r3, r0
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4403      	add	r3, r0
 800043e:	440b      	add	r3, r1
 8000440:	3301      	adds	r3, #1
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	2301      	movs	r3, #1
 8000448:	408b      	lsls	r3, r1
 800044a:	43db      	mvns	r3, r3
 800044c:	401a      	ands	r2, r3
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	615a      	str	r2, [r3, #20]
  for(unsigned char i=0 ; i < WriteChannelArraySize ; i++)
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	3301      	adds	r3, #1
 8000456:	73fb      	strb	r3, [r7, #15]
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d9a4      	bls.n	80003a8 <DIO_ChannelWrite_Group+0x10>
		       }
		   }
	  }

	}
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	080007b8 	.word	0x080007b8
 8000470:	20000000 	.word	0x20000000

08000474 <DIO_ChannelRead_Group>:
		}

}

unsigned int * DIO_ChannelRead_Group(unsigned char ReadChannelsId[ReadChannelArraySize], unsigned char ReturnedData[ReadChannelArraySize])
{
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	  for(int i=0 ; i < ReadChannelArraySize ; i++)
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	e044      	b.n	800050e <DIO_ChannelRead_Group+0x9a>
		{
		  if(ReadChannelsId[i]<DIO_NUM_OF_CHANNELS){
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b04      	cmp	r3, #4
 800048e:	d83b      	bhi.n	8000508 <DIO_ChannelRead_Group+0x94>
			  unsigned char PortId;
			  PortId = DIO_ConfigParam[ReadChannelsId[i]].PortId;
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	4a22      	ldr	r2, [pc, #136]	; (8000524 <DIO_ChannelRead_Group+0xb0>)
 800049c:	460b      	mov	r3, r1
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	440b      	add	r3, r1
 80004a2:	4413      	add	r3, r2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	74fb      	strb	r3, [r7, #19]
			  if(!DIO_ConfigParam[ReadChannelsId[i]].PortDirection)
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <DIO_ChannelRead_Group+0xb0>)
 80004b4:	460b      	mov	r3, r1
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	440b      	add	r3, r1
 80004ba:	4413      	add	r3, r2
 80004bc:	3302      	adds	r3, #2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d121      	bne.n	8000508 <DIO_ChannelRead_Group+0x94>
			  {
				  GPIO_TypeDef * GPIOx =Ports[PortId];
 80004c4:	7cfb      	ldrb	r3, [r7, #19]
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <DIO_ChannelRead_Group+0xb4>)
 80004c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004cc:	60fb      	str	r3, [r7, #12]
				  ReturnedData[i] = ((1<<(DIO_ConfigParam[ReadChannelsId[i]].PinNum))&GPIOx->IDR)?1:0;
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4413      	add	r3, r2
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	4619      	mov	r1, r3
 80004d8:	4a12      	ldr	r2, [pc, #72]	; (8000524 <DIO_ChannelRead_Group+0xb0>)
 80004da:	460b      	mov	r3, r1
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	440b      	add	r3, r1
 80004e0:	4413      	add	r3, r2
 80004e2:	3301      	adds	r3, #1
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	461a      	mov	r2, r3
 80004e8:	2301      	movs	r3, #1
 80004ea:	4093      	lsls	r3, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	691b      	ldr	r3, [r3, #16]
 80004f2:	4013      	ands	r3, r2
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	bf14      	ite	ne
 80004f8:	2301      	movne	r3, #1
 80004fa:	2300      	moveq	r3, #0
 80004fc:	b2d9      	uxtb	r1, r3
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	4413      	add	r3, r2
 8000504:	460a      	mov	r2, r1
 8000506:	701a      	strb	r2, [r3, #0]
	  for(int i=0 ; i < ReadChannelArraySize ; i++)
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3301      	adds	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b02      	cmp	r3, #2
 8000512:	ddb7      	ble.n	8000484 <DIO_ChannelRead_Group+0x10>
			  }

		  }

    }
	  return ReturnedData;
 8000514:	683b      	ldr	r3, [r7, #0]
}
 8000516:	4618      	mov	r0, r3
 8000518:	371c      	adds	r7, #28
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	080007b8 	.word	0x080007b8
 8000528:	20000000 	.word	0x20000000

0800052c <delay>:
void DIO_Init(void);
void DIO_ChannelWrite(unsigned char ChannelId, unsigned char Data);
void DIO_ChannelWrite_Group(unsigned char ChannelsID[], unsigned char Data[]);
void DIO_ChannelRead(unsigned char ChannelId, unsigned char *DataPtr);
unsigned int * DIO_ChannelRead_Group(unsigned char ReadChannelsId[], unsigned char ReturnedData[]);
void delay(int sec){
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	for (int i=0 ; i<sec ; i++){}
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e002      	b.n	8000540 <delay+0x14>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	3301      	adds	r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf8      	blt.n	800053a <delay+0xe>
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <main>:
unsigned char Clear[]={0,0};        /*To Clear ChannelsID*/
unsigned char ReadChannelsID[]={0,3}; /*ChannelsID to read from*/
unsigned char ReturnedData[]={0,0};   /*Returned Data from Read Channels*/

int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	DIO_Init();
 800055c:	f7ff fe3a 	bl	80001d4 <DIO_Init>

	while(1)
	  {
		DIO_ChannelRead_Group(ReadChannelsID , ReturnedData);  /*Read buttons on pin 1 and 4*/
 8000560:	490c      	ldr	r1, [pc, #48]	; (8000594 <main+0x3c>)
 8000562:	480d      	ldr	r0, [pc, #52]	; (8000598 <main+0x40>)
 8000564:	f7ff ff86 	bl	8000474 <DIO_ChannelRead_Group>
		delay(500);
 8000568:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800056c:	f7ff ffde 	bl	800052c <delay>
		DIO_ChannelRead_Group(ReadChannelsID , ReturnedData);
 8000570:	4908      	ldr	r1, [pc, #32]	; (8000594 <main+0x3c>)
 8000572:	4809      	ldr	r0, [pc, #36]	; (8000598 <main+0x40>)
 8000574:	f7ff ff7e 	bl	8000474 <DIO_ChannelRead_Group>
		if((ReturnedData[0] == 0) && (ReturnedData[1] == 1)){ /*check if button on 1 pressed and on 4 released*/
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <main+0x3c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1ef      	bne.n	8000560 <main+0x8>
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <main+0x3c>)
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d1eb      	bne.n	8000560 <main+0x8>
			DIO_ChannelWrite_Group(ChannelsID,Data); /*turn on the leds*/
 8000588:	4904      	ldr	r1, [pc, #16]	; (800059c <main+0x44>)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <main+0x48>)
 800058c:	f7ff ff04 	bl	8000398 <DIO_ChannelWrite_Group>
		DIO_ChannelRead_Group(ReadChannelsID , ReturnedData);  /*Read buttons on pin 1 and 4*/
 8000590:	e7e6      	b.n	8000560 <main+0x8>
 8000592:	bf00      	nop
 8000594:	2000003c 	.word	0x2000003c
 8000598:	20000018 	.word	0x20000018
 800059c:	20000014 	.word	0x20000014
 80005a0:	20000010 	.word	0x20000010

080005a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <SystemInit+0x60>)
 80005aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <SystemInit+0x60>)
 80005b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <SystemInit+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <SystemInit+0x64>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <SystemInit+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <SystemInit+0x64>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <SystemInit+0x64>)
 80005d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SystemInit+0x64>)
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <SystemInit+0x68>)
 80005de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <SystemInit+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a08      	ldr	r2, [pc, #32]	; (8000608 <SystemInit+0x64>)
 80005e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <SystemInit+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80005f2:	f000 f80d 	bl	8000610 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <SystemInit+0x60>)
 80005f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005fc:	609a      	str	r2, [r3, #8]
#endif
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	40023800 	.word	0x40023800
 800060c:	24003010 	.word	0x24003010

08000610 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800061e:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <SetSysClock+0xe4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a34      	ldr	r2, [pc, #208]	; (80006f4 <SetSysClock+0xe4>)
 8000624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000628:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800062a:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <SetSysClock+0xe4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000632:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <SetSysClock+0x38>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000646:	d1f0      	bne.n	800062a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <SetSysClock+0xe4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000654:	2301      	movs	r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	e001      	b.n	800065e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d140      	bne.n	80006e6 <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <SetSysClock+0xe4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SetSysClock+0xe4>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <SetSysClock+0xe8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SetSysClock+0xe8>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <SetSysClock+0xe4>)
 800067e:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <SetSysClock+0xe4>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <SetSysClock+0xe4>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SetSysClock+0xe4>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <SetSysClock+0xe4>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <SetSysClock+0xe4>)
 8000692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000696:	6093      	str	r3, [r2, #8]
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <SetSysClock+0xe4>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <SetSysClock+0xec>)
 800069c:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <SetSysClock+0xe4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <SetSysClock+0xe4>)
 80006a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006a8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006aa:	bf00      	nop
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SetSysClock+0xe4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0f9      	beq.n	80006ac <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
#endif /* STM32F413_423xx */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SetSysClock+0xf0>)
 80006ba:	f240 7202 	movw	r2, #1794	; 0x702
 80006be:	601a      	str	r2, [r3, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <SetSysClock+0xe4>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <SetSysClock+0xe4>)
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <SetSysClock+0xe4>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <SetSysClock+0xe4>)
 80006d2:	f043 0302 	orr.w	r3, r3, #2
 80006d6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80006d8:	bf00      	nop
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SetSysClock+0xe4>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	f003 030c 	and.w	r3, r3, #12
 80006e2:	2b08      	cmp	r3, #8
 80006e4:	d1f9      	bne.n	80006da <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000
 80006fc:	07415419 	.word	0x07415419
 8000700:	40023c00 	.word	0x40023c00

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490e      	ldr	r1, [pc, #56]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0b      	ldr	r4, [pc, #44]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800072e:	f7ff ff39 	bl	80005a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000732:	f000 f811 	bl	8000758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff ff0f 	bl	8000558 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000748:	080007dc 	.word	0x080007dc
  ldr r2, =_sbss
 800074c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000750:	20000040 	.word	0x20000040

08000754 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC_IRQHandler>
	...

08000758 <__libc_init_array>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	4d0d      	ldr	r5, [pc, #52]	; (8000790 <__libc_init_array+0x38>)
 800075c:	4c0d      	ldr	r4, [pc, #52]	; (8000794 <__libc_init_array+0x3c>)
 800075e:	1b64      	subs	r4, r4, r5
 8000760:	10a4      	asrs	r4, r4, #2
 8000762:	2600      	movs	r6, #0
 8000764:	42a6      	cmp	r6, r4
 8000766:	d109      	bne.n	800077c <__libc_init_array+0x24>
 8000768:	4d0b      	ldr	r5, [pc, #44]	; (8000798 <__libc_init_array+0x40>)
 800076a:	4c0c      	ldr	r4, [pc, #48]	; (800079c <__libc_init_array+0x44>)
 800076c:	f000 f818 	bl	80007a0 <_init>
 8000770:	1b64      	subs	r4, r4, r5
 8000772:	10a4      	asrs	r4, r4, #2
 8000774:	2600      	movs	r6, #0
 8000776:	42a6      	cmp	r6, r4
 8000778:	d105      	bne.n	8000786 <__libc_init_array+0x2e>
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000780:	4798      	blx	r3
 8000782:	3601      	adds	r6, #1
 8000784:	e7ee      	b.n	8000764 <__libc_init_array+0xc>
 8000786:	f855 3b04 	ldr.w	r3, [r5], #4
 800078a:	4798      	blx	r3
 800078c:	3601      	adds	r6, #1
 800078e:	e7f2      	b.n	8000776 <__libc_init_array+0x1e>
 8000790:	080007d4 	.word	0x080007d4
 8000794:	080007d4 	.word	0x080007d4
 8000798:	080007d4 	.word	0x080007d4
 800079c:	080007d8 	.word	0x080007d8

080007a0 <_init>:
 80007a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a2:	bf00      	nop
 80007a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a6:	bc08      	pop	{r3}
 80007a8:	469e      	mov	lr, r3
 80007aa:	4770      	bx	lr

080007ac <_fini>:
 80007ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ae:	bf00      	nop
 80007b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b2:	bc08      	pop	{r3}
 80007b4:	469e      	mov	lr, r3
 80007b6:	4770      	bx	lr
